<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.7" xml:lang="en-US">
  <compounddef id="class_i_l_b" kind="class" language="C++" prot="public">
    <compoundname>ILB</compoundname>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_i_l_b_1a1631b6fbd75828e91aaf932385d9e612" prot="private" static="no" mutable="no">
        <type>TwoWire *</type>
        <definition>TwoWire* ILB::_wire</definition>
        <argsstring></argsstring>
        <name>_wire</name>
        <qualifiedname>ILB::_wire</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ILB.h" line="96" column="13" bodyfile="src/ILB.h" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_i_l_b_1a71600ed7ac85c134f2d3e973e058c5b1" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int ILB::i2cAddress</definition>
        <argsstring></argsstring>
        <name>i2cAddress</name>
        <qualifiedname>ILB::i2cAddress</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ILB.h" line="97" column="9" bodyfile="src/ILB.h" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_i_l_b_1a832169055b23eb8ed918fdf62c7f03df" prot="private" static="no" mutable="no">
        <type>float</type>
        <definition>float ILB::gain_factor[5]</definition>
        <argsstring>[5]</argsstring>
        <name>gain_factor</name>
        <qualifiedname>ILB::gain_factor</qualifiedname>
        <initializer>= {1, 3, 6, 9, 18}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ILB.h" line="98" column="11" bodyfile="src/ILB.h" bodystart="98" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_i_l_b_1a77c3f682fbd01fa27963ae09505d6110" prot="private" static="no" mutable="no">
        <type>float</type>
        <definition>float ILB::res_factor[6]</definition>
        <argsstring>[6]</argsstring>
        <name>res_factor</name>
        <qualifiedname>ILB::res_factor</qualifiedname>
        <initializer>= {4, 2, 1, 0.5, 0.25, 0.03125}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ILB.h" line="99" column="11" bodyfile="src/ILB.h" bodystart="99" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_i_l_b_1a659a4c5aa4539584d76adb9376500e43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ILB::ILB</definition>
        <argsstring>(int addr)</argsstring>
        <name>ILB</name>
        <qualifiedname>ILB::ILB</qualifiedname>
        <param>
          <type>int</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ILB.h" line="57" column="5" bodyfile="src/ILB.cpp" bodystart="3" bodyend="6"/>
      </memberdef>
      <memberdef kind="function" id="class_i_l_b_1a5d2c9a55d9f3c4a66a117ebdb4ff4355" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ILB::ILB</definition>
        <argsstring>()</argsstring>
        <name>ILB</name>
        <qualifiedname>ILB::ILB</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ILB.h" line="58" column="5" bodyfile="src/ILB.cpp" bodystart="8" bodyend="11"/>
      </memberdef>
      <memberdef kind="function" id="class_i_l_b_1a21278bdc431f0fe0f36b96f8efa3a042" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ILB::ILB</definition>
        <argsstring>(TwoWire *w, int addr)</argsstring>
        <name>ILB</name>
        <qualifiedname>ILB::ILB</qualifiedname>
        <param>
          <type>TwoWire *</type>
          <declname>w</declname>
        </param>
        <param>
          <type>int</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ILB.h" line="59" column="5" bodyfile="src/ILB.cpp" bodystart="13" bodyend="16"/>
      </memberdef>
      <memberdef kind="function" id="class_i_l_b_1a1c34c8882e39d868ad69e2fe706f5909" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ILB::ILB</definition>
        <argsstring>(TwoWire *w)</argsstring>
        <name>ILB</name>
        <qualifiedname>ILB::ILB</qualifiedname>
        <param>
          <type>TwoWire *</type>
          <declname>w</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ILB.h" line="60" column="5" bodyfile="src/ILB.cpp" bodystart="18" bodyend="21"/>
      </memberdef>
      <memberdef kind="function" id="class_i_l_b_1af43def163c6d13a3817a4d14b42a2de9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ILB::begin</definition>
        <argsstring>()</argsstring>
        <name>begin</name>
        <qualifiedname>ILB::begin</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ILB.h" line="61" column="10" bodyfile="src/ILB.cpp" bodystart="23" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="class_i_l_b_1a089d5c45acd0fc66862269687c9030a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ILB::getData</definition>
        <argsstring>(float &amp;Lux, float &amp;UVI)</argsstring>
        <name>getData</name>
        <qualifiedname>ILB::getData</qualifiedname>
        <param>
          <type>float &amp;</type>
          <declname>Lux</declname>
        </param>
        <param>
          <type>float &amp;</type>
          <declname>UVI</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ILB.h" line="62" column="10" bodyfile="src/ILB.cpp" bodystart="45" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="class_i_l_b_1a33df8384546d41fa2ba935006f0a9359" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ILB::getJSON</definition>
        <argsstring>(JsonObject &amp;doc)</argsstring>
        <name>getJSON</name>
        <qualifiedname>ILB::getJSON</qualifiedname>
        <param>
          <type>JsonObject &amp;</type>
          <declname>doc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ILB.h" line="63" column="10" bodyfile="src/ILB.cpp" bodystart="65" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="class_i_l_b_1a1fad9bcdb535269af5795b030a2defee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ILB::reset</definition>
        <argsstring>(void)</argsstring>
        <name>reset</name>
        <qualifiedname>ILB::reset</qualifiedname>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Perform a soft reset with 10ms delay. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True on success (reset bit was cleared post-write) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ILB.h" line="65" column="10" bodyfile="src/ILB.cpp" bodystart="90" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="class_i_l_b_1af18e9e93fccf4bc9688530a57b2c6752" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ILB::enable</definition>
        <argsstring>(bool en)</argsstring>
        <name>enable</name>
        <qualifiedname>ILB::enable</qualifiedname>
        <param>
          <type>bool</type>
          <declname>en</declname>
        </param>
        <briefdescription>
<para>Enable or disable the light sensor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>en</parametername>
</parameternamelist>
<parameterdescription>
<para>True to enable, False to disable </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ILB.h" line="67" column="10" bodyfile="src/ILB.cpp" bodystart="161" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="class_i_l_b_1a97546e5a084cc3b909db7ede2f904e98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ILB::enabled</definition>
        <argsstring>(void)</argsstring>
        <name>enabled</name>
        <qualifiedname>ILB::enabled</qualifiedname>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Read the enabled-bit from the sensor. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if enabled </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ILB.h" line="68" column="10" bodyfile="src/ILB.cpp" bodystart="171" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="class_i_l_b_1a3f4ce5a2d87b3b625a5c464638662745" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ILB::setMode</definition>
        <argsstring>(ILB_mode_t mode)</argsstring>
        <name>setMode</name>
        <qualifiedname>ILB::setMode</qualifiedname>
        <param>
          <type>ILB_mode_t</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Set the sensor mode to EITHER ambient (ILB_MODE_ALS) or UV (ILB_MODE_UVS) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>The desired mode - ILB_MODE_UVS or ILB_MODE_ALS </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ILB.h" line="70" column="10" bodyfile="src/ILB.cpp" bodystart="183" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="class_i_l_b_1ac9a119a4eb616658f137c1f530d13c2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ILB_mode_t</type>
        <definition>ILB_mode_t ILB::getMode</definition>
        <argsstring>(void)</argsstring>
        <name>getMode</name>
        <qualifiedname>ILB::getMode</qualifiedname>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>get the sensor&apos;s mode </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The current mode - ILB_MODE_UVS or ILB_MODE_ALS </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ILB.h" line="71" column="16" bodyfile="src/ILB.cpp" bodystart="194" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="class_i_l_b_1a21c548942d55ca6bf328c18c5fbae68b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ILB::setGain</definition>
        <argsstring>(ILB_gain_t gain)</argsstring>
        <name>setGain</name>
        <qualifiedname>ILB::setGain</qualifiedname>
        <param>
          <type>ILB_gain_t</type>
          <declname>gain</declname>
        </param>
        <briefdescription>
<para>Set the sensor gain. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>gain</parametername>
</parameternamelist>
<parameterdescription>
<para>The desired gain: ILB_GAIN_1, ILB_GAIN_3, ILB_GAIN_6 ILB_GAIN_9 or ILB_GAIN_18 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ILB.h" line="73" column="10" bodyfile="src/ILB.cpp" bodystart="206" bodyend="208"/>
      </memberdef>
      <memberdef kind="function" id="class_i_l_b_1a14a6af413cca8213202ecbbd344488a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ILB_gain_t</type>
        <definition>ILB_gain_t ILB::getGain</definition>
        <argsstring>(void)</argsstring>
        <name>getGain</name>
        <qualifiedname>ILB::getGain</qualifiedname>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get the sensor&apos;s gain. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>gain The current gain: ILB_GAIN_1, ILB_GAIN_3, ILB_GAIN_6 ILB_GAIN_9 or ILB_GAIN_18 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ILB.h" line="74" column="16" bodyfile="src/ILB.cpp" bodystart="215" bodyend="219"/>
      </memberdef>
      <memberdef kind="function" id="class_i_l_b_1a7538449efd92a4292644c9dcfcdb85c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ILB::setResolution</definition>
        <argsstring>(ILB_resolution_t res)</argsstring>
        <name>setResolution</name>
        <qualifiedname>ILB::setResolution</qualifiedname>
        <param>
          <type>ILB_resolution_t</type>
          <declname>res</declname>
        </param>
        <briefdescription>
<para>Set the sensor resolution. Higher resolutions take longer to read! </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>res</parametername>
</parameternamelist>
<parameterdescription>
<para>The desired resolution: ILB_RESOLUTION_13BIT, ILB_RESOLUTION_16BIT, ILB_RESOLUTION_17BIT, ILB_RESOLUTION_18BIT, ILB_RESOLUTION_19BIT or ILB_RESOLUTION_20BIT </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ILB.h" line="76" column="10" bodyfile="src/ILB.cpp" bodystart="227" bodyend="231"/>
      </memberdef>
      <memberdef kind="function" id="class_i_l_b_1a05afb53e77ffb962d0d655aaa840952f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ILB_resolution_t</type>
        <definition>ILB_resolution_t ILB::getResolution</definition>
        <argsstring>(void)</argsstring>
        <name>getResolution</name>
        <qualifiedname>ILB::getResolution</qualifiedname>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get the sensor&apos;s resolution. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The current resolution: ILB_RESOLUTION_13BIT, ILB_RESOLUTION_16BIT, ILB_RESOLUTION_17BIT, ILB_RESOLUTION_18BIT, ILB_RESOLUTION_19BIT or ILB_RESOLUTION_20BIT </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ILB.h" line="77" column="22" bodyfile="src/ILB.cpp" bodystart="239" bodyend="244"/>
      </memberdef>
      <memberdef kind="function" id="class_i_l_b_1a57c2a5a61e06c8c848e9527af38482ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ILB::setThresholds</definition>
        <argsstring>(uint32_t lower, uint32_t higher)</argsstring>
        <name>setThresholds</name>
        <qualifiedname>ILB::setThresholds</qualifiedname>
        <param>
          <type>uint32_t</type>
          <declname>lower</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>higher</declname>
        </param>
        <briefdescription>
<para>Set the interrupt output threshold range for lower and upper. When the sensor is below the lower, or above upper, interrupt will fire. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lower</parametername>
</parameternamelist>
<parameterdescription>
<para>The lower value to compare against the data register. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>higher</parametername>
</parameternamelist>
<parameterdescription>
<para>The higher value to compare against the data register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ILB.h" line="79" column="10" bodyfile="src/ILB.cpp" bodystart="252" bodyend="267"/>
      </memberdef>
      <memberdef kind="function" id="class_i_l_b_1a50cc628fbde01fd98127f8b741993964" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ILB::configInterrupt</definition>
        <argsstring>(bool enable, ILB_mode_t source, uint8_t persistance=0)</argsstring>
        <name>configInterrupt</name>
        <qualifiedname>ILB::configInterrupt</qualifiedname>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <param>
          <type>ILB_mode_t</type>
          <declname>source</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>persistance</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Configure the interrupt based on the thresholds in <ref refid="class_i_l_b_1a57c2a5a61e06c8c848e9527af38482ae" kindref="member">setThresholds()</ref> When the sensor is below the lower, or above upper thresh, interrupt will fire. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>enable</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether the interrupt output is enabled </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to use the ALS or UVS data register to compare </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>persistance</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of consecutive out-of-range readings before we fire the IRQ. Default is 0 (each reading will fire) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ILB.h" line="81" column="10" bodyfile="src/ILB.cpp" bodystart="278" bodyend="287"/>
      </memberdef>
      <memberdef kind="function" id="class_i_l_b_1a0544d9e88bf00ed1fb7d9f67483dd449" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ILB::newDataAvailable</definition>
        <argsstring>(void)</argsstring>
        <name>newDataAvailable</name>
        <qualifiedname>ILB::newDataAvailable</qualifiedname>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Checks if new data is available in data register. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True on new data available </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ILB.h" line="84" column="10" bodyfile="src/ILB.cpp" bodystart="107" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="class_i_l_b_1a6b6c760930d71dafe6a05e9df5451c85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t ILB::readUVS</definition>
        <argsstring>(void)</argsstring>
        <name>readUVS</name>
        <qualifiedname>ILB::readUVS</qualifiedname>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Read 3-bytes out of UV data register, does not check if data is new! </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Up to 20 bits, right shifted into a 32 bit int </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ILB.h" line="85" column="14" bodyfile="src/ILB.cpp" bodystart="132" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="class_i_l_b_1a505f2f22176a6621b5f982a5f3855a6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t ILB::readALS</definition>
        <argsstring>(void)</argsstring>
        <name>readALS</name>
        <qualifiedname>ILB::readALS</qualifiedname>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Read 3-bytes out of ambient data register, does not check if data is new! </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Up to 20 bits, right shifted into a 32 bit int </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ILB.h" line="86" column="14" bodyfile="src/ILB.cpp" bodystart="119" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="class_i_l_b_1ad6184d74badbb31fc7daac19ec9f21b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float ILB::getLux</definition>
        <argsstring>(void)</argsstring>
        <name>getLux</name>
        <qualifiedname>ILB::getLux</qualifiedname>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ILB.h" line="88" column="11" bodyfile="src/ILB.cpp" bodystart="141" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="class_i_l_b_1ac91f9f136325a2fb2465128fa729c425" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float ILB::getUVI</definition>
        <argsstring>(void)</argsstring>
        <name>getUVI</name>
        <qualifiedname>ILB::getUVI</qualifiedname>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ILB.h" line="90" column="11" bodyfile="src/ILB.cpp" bodystart="149" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="class_i_l_b_1a4f9caab1625e761553320a09010bbd0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t ILB::writeRegister</definition>
        <argsstring>(uint8_t reg, uint8_t val)</argsstring>
        <name>writeRegister</name>
        <qualifiedname>ILB::writeRegister</qualifiedname>
        <param>
          <type>uint8_t</type>
          <declname>reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ILB.h" line="92" column="13" bodyfile="src/ILB.cpp" bodystart="289" bodyend="294"/>
      </memberdef>
      <memberdef kind="function" id="class_i_l_b_1ae6bb8899b0208fed6a5c77987e87c434" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t ILB::readRegister</definition>
        <argsstring>(uint8_t reg)</argsstring>
        <name>readRegister</name>
        <qualifiedname>ILB::readRegister</qualifiedname>
        <param>
          <type>uint8_t</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ILB.h" line="93" column="13" bodyfile="src/ILB.cpp" bodystart="296" bodyend="306"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/ILB.h" line="55" column="1" bodyfile="src/ILB.h" bodystart="55" bodyend="100"/>
    <listofallmembers>
      <member refid="class_i_l_b_1a1631b6fbd75828e91aaf932385d9e612" prot="private" virt="non-virtual"><scope>ILB</scope><name>_wire</name></member>
      <member refid="class_i_l_b_1af43def163c6d13a3817a4d14b42a2de9" prot="public" virt="non-virtual"><scope>ILB</scope><name>begin</name></member>
      <member refid="class_i_l_b_1a50cc628fbde01fd98127f8b741993964" prot="public" virt="non-virtual"><scope>ILB</scope><name>configInterrupt</name></member>
      <member refid="class_i_l_b_1af18e9e93fccf4bc9688530a57b2c6752" prot="public" virt="non-virtual"><scope>ILB</scope><name>enable</name></member>
      <member refid="class_i_l_b_1a97546e5a084cc3b909db7ede2f904e98" prot="public" virt="non-virtual"><scope>ILB</scope><name>enabled</name></member>
      <member refid="class_i_l_b_1a832169055b23eb8ed918fdf62c7f03df" prot="private" virt="non-virtual"><scope>ILB</scope><name>gain_factor</name></member>
      <member refid="class_i_l_b_1a089d5c45acd0fc66862269687c9030a5" prot="public" virt="non-virtual"><scope>ILB</scope><name>getData</name></member>
      <member refid="class_i_l_b_1a14a6af413cca8213202ecbbd344488a2" prot="public" virt="non-virtual"><scope>ILB</scope><name>getGain</name></member>
      <member refid="class_i_l_b_1a33df8384546d41fa2ba935006f0a9359" prot="public" virt="non-virtual"><scope>ILB</scope><name>getJSON</name></member>
      <member refid="class_i_l_b_1ad6184d74badbb31fc7daac19ec9f21b4" prot="public" virt="non-virtual"><scope>ILB</scope><name>getLux</name></member>
      <member refid="class_i_l_b_1ac9a119a4eb616658f137c1f530d13c2d" prot="public" virt="non-virtual"><scope>ILB</scope><name>getMode</name></member>
      <member refid="class_i_l_b_1a05afb53e77ffb962d0d655aaa840952f" prot="public" virt="non-virtual"><scope>ILB</scope><name>getResolution</name></member>
      <member refid="class_i_l_b_1ac91f9f136325a2fb2465128fa729c425" prot="public" virt="non-virtual"><scope>ILB</scope><name>getUVI</name></member>
      <member refid="class_i_l_b_1a71600ed7ac85c134f2d3e973e058c5b1" prot="private" virt="non-virtual"><scope>ILB</scope><name>i2cAddress</name></member>
      <member refid="class_i_l_b_1a659a4c5aa4539584d76adb9376500e43" prot="public" virt="non-virtual"><scope>ILB</scope><name>ILB</name></member>
      <member refid="class_i_l_b_1a5d2c9a55d9f3c4a66a117ebdb4ff4355" prot="public" virt="non-virtual"><scope>ILB</scope><name>ILB</name></member>
      <member refid="class_i_l_b_1a21278bdc431f0fe0f36b96f8efa3a042" prot="public" virt="non-virtual"><scope>ILB</scope><name>ILB</name></member>
      <member refid="class_i_l_b_1a1c34c8882e39d868ad69e2fe706f5909" prot="public" virt="non-virtual"><scope>ILB</scope><name>ILB</name></member>
      <member refid="class_i_l_b_1a0544d9e88bf00ed1fb7d9f67483dd449" prot="public" virt="non-virtual"><scope>ILB</scope><name>newDataAvailable</name></member>
      <member refid="class_i_l_b_1a505f2f22176a6621b5f982a5f3855a6c" prot="public" virt="non-virtual"><scope>ILB</scope><name>readALS</name></member>
      <member refid="class_i_l_b_1ae6bb8899b0208fed6a5c77987e87c434" prot="public" virt="non-virtual"><scope>ILB</scope><name>readRegister</name></member>
      <member refid="class_i_l_b_1a6b6c760930d71dafe6a05e9df5451c85" prot="public" virt="non-virtual"><scope>ILB</scope><name>readUVS</name></member>
      <member refid="class_i_l_b_1a77c3f682fbd01fa27963ae09505d6110" prot="private" virt="non-virtual"><scope>ILB</scope><name>res_factor</name></member>
      <member refid="class_i_l_b_1a1fad9bcdb535269af5795b030a2defee" prot="public" virt="non-virtual"><scope>ILB</scope><name>reset</name></member>
      <member refid="class_i_l_b_1a21c548942d55ca6bf328c18c5fbae68b" prot="public" virt="non-virtual"><scope>ILB</scope><name>setGain</name></member>
      <member refid="class_i_l_b_1a3f4ce5a2d87b3b625a5c464638662745" prot="public" virt="non-virtual"><scope>ILB</scope><name>setMode</name></member>
      <member refid="class_i_l_b_1a7538449efd92a4292644c9dcfcdb85c4" prot="public" virt="non-virtual"><scope>ILB</scope><name>setResolution</name></member>
      <member refid="class_i_l_b_1a57c2a5a61e06c8c848e9527af38482ae" prot="public" virt="non-virtual"><scope>ILB</scope><name>setThresholds</name></member>
      <member refid="class_i_l_b_1a4f9caab1625e761553320a09010bbd0b" prot="public" virt="non-virtual"><scope>ILB</scope><name>writeRegister</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
